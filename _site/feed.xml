<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-12-12T17:55:51+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">My blog</title><subtitle>My very nice blog</subtitle><author><name>Jorge Sanz</name></author><entry><title type="html">Tutorial VIII: HTML</title><link href="http://localhost:4000/2020/04/20/html.html" rel="alternate" type="text/html" title="Tutorial VIII: HTML" /><published>2020-04-20T00:00:00+02:00</published><updated>2020-04-20T00:00:00+02:00</updated><id>http://localhost:4000/2020/04/20/html</id><content type="html" xml:base="http://localhost:4000/2020/04/20/html.html">&lt;p&gt;Quick note on highlighting that Markdown supports raw HTML. That means that if for some reason Markdown falls short or becomes inconvenient for a thing you are authoring, you can always use HTML as a fallback solution. One very common scenario is customizing the width and height of your images.&lt;/p&gt;

&lt;p&gt;You can check the source code of the &lt;a href=&quot;/2020/03/24/edit-content.html&quot;&gt;editing content&lt;/a&gt; post to see how I moved from the standard syntax for images using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![alt text](image path)&lt;/code&gt; to use HTML to allow to set up a custom width using a CSS style.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text-align:right; margin: 20px 0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Another example could be to 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color:red&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;change text color&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;.
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align:right; margin: 20px 0&quot;&gt;
&lt;p&gt;
Another example could be to &lt;span style=&quot;color:red&quot;&gt;change text color&lt;/span&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Easy right? ðŸ˜€&lt;/p&gt;</content><author><name>Jorge Sanz</name></author><summary type="html">Quick note on highlighting that Markdown supports raw HTML. That means that if for some reason Markdown falls short or becomes inconvenient for a thing you are authoring, you can always use HTML as a fallback solution. One very common scenario is customizing the width and height of your images.</summary></entry><entry><title type="html">Tutorial VII: internal links</title><link href="http://localhost:4000/2020/04/19/links.html" rel="alternate" type="text/html" title="Tutorial VII: internal links" /><published>2020-04-19T00:00:00+02:00</published><updated>2020-04-19T00:00:00+02:00</updated><id>http://localhost:4000/2020/04/19/links</id><content type="html" xml:base="http://localhost:4000/2020/04/19/links.html">&lt;p&gt;In your blog post you will write links to internal resources, like other articles, pages, and images. You can use relative paths for those assets so for example to link the archive you may use the following code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[archive](/archive)&lt;/code&gt;. This will work fine, since thatâ€™s the url of your archive, but what happens if you decide to change the url? Youâ€™d have to search for any occurrence in your site for any link and fix it.&lt;/p&gt;

&lt;p&gt;A different approach is to use a Jekyll feature called &lt;em&gt;Liquid tags&lt;/em&gt;. From the &lt;a href=&quot;https://jekyllrb.com/docs/liquid/&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll uses the &lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid&lt;/a&gt; templating language to process templates.&lt;/p&gt;

  &lt;p&gt;Generally in Liquid you output content using two curly braces e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ variable }}&lt;/code&gt; and perform logic statements by surrounding them in a curly brace percentage sign e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{% if statement %}&lt;/code&gt;. To learn more about Liquid, check out the &lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;official Liquid Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a Liquid tag to link to files, getting as a result the corresponding url for the resource. So for our archive we would use:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[archive]({{ site.base_url }}{% link _pages/archive.md %})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and this would be automatically converted into&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[archive](/gh-pages-minima-starter/archive)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For a blog post this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[first post]({{ site.base_url }}{% link _posts/2020-03-18-my-first-post.md %})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;transforms into:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[first post](/gh-pages-minima-starter/2020/03/18/my-first-post.html)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apart from the benefit of being resilient to changes in the permalinks of your articles, this also has a very important effect: Jekyll &lt;strong&gt;will fail&lt;/strong&gt; to process your site if you use a wrong link. This means that Jekyll checks your internal links on every built, and if for any reason you change the name of your file in the future, Jekyll will error with details on where the offending link lives.&lt;/p&gt;

&lt;p&gt;An important final note is that if you paid attention, the links are relative to the root of your domain. If you deploy this site in your personal GitHub space thatâ€™s OK but if you publish it in a project so your URL is like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://yourusername.github.io/project&lt;/code&gt; then the URLs will fail. Youâ€™d need to put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ site.base_url }}&lt;/code&gt; &lt;strong&gt;before&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link&lt;/code&gt; tag, for absolute URLs that point to the correct resource.&lt;/p&gt;

&lt;p&gt;More details on this &lt;a href=&quot;https://www.webisland.agency/blog/jekyll-internal-links/&quot;&gt;nice article&lt;/a&gt;.&lt;/p&gt;</content><author><name>Jorge Sanz</name></author><summary type="html">In your blog post you will write links to internal resources, like other articles, pages, and images. You can use relative paths for those assets so for example to link the archive you may use the following code [archive](/archive). This will work fine, since thatâ€™s the url of your archive, but what happens if you decide to change the url? Youâ€™d have to search for any occurrence in your site for any link and fix it.</summary></entry><entry><title type="html">Tutorial VI: local environment</title><link href="http://localhost:4000/2020/04/17/local-env.html" rel="alternate" type="text/html" title="Tutorial VI: local environment" /><published>2020-04-17T00:00:00+02:00</published><updated>2020-04-17T00:00:00+02:00</updated><id>http://localhost:4000/2020/04/17/local-env</id><content type="html" xml:base="http://localhost:4000/2020/04/17/local-env.html">&lt;p&gt;Iâ€™ve included a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file in the root of the repo, so you can spin up a local environment without having to install in your computer Ruby or any other library. Just install &lt;a href=&quot;https://docs.docker.com/get-docker/&quot;&gt;Docker&lt;/a&gt; and &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;Docker Compose&lt;/a&gt;, visit the repo folder and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt; and visit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, if you prefer to install all the software locally please follow the &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/testing-your-github-pages-site-locally-with-jekyll&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The compose file is super simple, it just refers to Bret Fisher Jekyll image setting up the current folder as the container &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/site&lt;/code&gt; directory and saves in a host volume the jekyll files to avoid having to download them every time you start the container.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&apos;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bretfisher/jekyll-serve&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/site&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll:/usr/local/bundle&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4000:4000&apos;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Jorge Sanz</name></author><summary type="html">Iâ€™ve included a simple docker-compose.yml file in the root of the repo, so you can spin up a local environment without having to install in your computer Ruby or any other library. Just install Docker and Docker Compose, visit the repo folder and run docker-compose up and visit http://localhost:8080.</summary></entry><entry><title type="html">Tutorial V: posts</title><link href="http://localhost:4000/2020/04/15/posts.html" rel="alternate" type="text/html" title="Tutorial V: posts" /><published>2020-04-15T00:00:00+02:00</published><updated>2020-04-15T00:00:00+02:00</updated><id>http://localhost:4000/2020/04/15/posts</id><content type="html" xml:base="http://localhost:4000/2020/04/15/posts.html">&lt;p&gt;Posts in your website are stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder and they follow a naming convention that you should follow using the date first (year, month, day) and then a simple title slug. This helps to keep things organized.&lt;/p&gt;

&lt;p&gt;If you are using Github interface, you can use the top right buttons to create new files or upload them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gh-pages-minima-starter/assets/imgs/files.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Find more details on how to write Jekyll posts on &lt;a href=&quot;https://jekyllrb.com/docs/posts/&quot;&gt;the docs&lt;/a&gt;.&lt;/p&gt;</content><author><name>Jorge Sanz</name></author><summary type="html">Posts in your website are stored in the _posts folder and they follow a naming convention that you should follow using the date first (year, month, day) and then a simple title slug. This helps to keep things organized.</summary></entry><entry><title type="html">Tutorial IV: editing from Github</title><link href="http://localhost:4000/2020/03/25/github-edit.html" rel="alternate" type="text/html" title="Tutorial IV: editing from Github" /><published>2020-03-25T00:00:00+01:00</published><updated>2020-03-25T00:00:00+01:00</updated><id>http://localhost:4000/2020/03/25/github-edit</id><content type="html" xml:base="http://localhost:4000/2020/03/25/github-edit.html">&lt;p&gt;Editing pages in Github is &lt;strong&gt;super simple&lt;/strong&gt;, just click on the pencil in the top right corner and open an editing interface where you can even preview the changes that you are applying. Once you are done add a short comment to your change (&lt;em&gt;commit&lt;/em&gt; in git/github vocabulary) and save them. Remember all changes are saved and available for you to explore afterwards if needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gh-pages-minima-starter/assets/imgs/editing.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If your site grows you may want to set up a local environment to make things easier to you. We cover that in the &lt;a href=&quot;/2020/04/15/posts.html&quot;&gt;local environment&lt;/a&gt; post.&lt;/p&gt;</content><author><name>Jorge Sanz</name></author><summary type="html">Editing pages in Github is super simple, just click on the pencil in the top right corner and open an editing interface where you can even preview the changes that you are applying. Once you are done add a short comment to your change (commit in git/github vocabulary) and save them. Remember all changes are saved and available for you to explore afterwards if needed.</summary></entry><entry><title type="html">Tutorial III: editing your content</title><link href="http://localhost:4000/2020/03/24/edit-content.html" rel="alternate" type="text/html" title="Tutorial III: editing your content" /><published>2020-03-24T00:00:00+01:00</published><updated>2020-03-24T00:00:00+01:00</updated><id>http://localhost:4000/2020/03/24/edit-content</id><content type="html" xml:base="http://localhost:4000/2020/03/24/edit-content.html">&lt;p&gt;From the &lt;a href=&quot;/gh-pages-minima-starter/2020/03/22/fork-it.html&quot;&gt;last post&lt;/a&gt;, your website is published with your details but now how to edit the frontpage, remove the example blog posts or create your own. Letâ€™s dive in to that.&lt;/p&gt;

&lt;p&gt;First thing to know is that &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; by default accepts rendering content in HTML and &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt;. I &lt;strong&gt;strongly&lt;/strong&gt; recommend using Markdown because itâ€™s very simple and out of your way when you write, since the formatting rules are very simple. If you are going to write a long piece, you may want to use an external editor and then upload or paste your content into github. There are many text editors that support Markdown but if I have to suggest one that works well for writing Iâ€™d go for &lt;a href=&quot;https://typora.io/&quot;&gt;typora&lt;/a&gt; because itâ€™s supporting Linux, Windows, and also MacOS (in beta).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gh-pages-minima-starter/assets/imgs/typora.png&quot; style=&quot;width:400px&quot; /&gt;&lt;br /&gt;
&lt;em&gt;Typora&lt;/em&gt;&lt;/p&gt;</content><author><name>Jorge Sanz</name></author><summary type="html">From the last post, your website is published with your details but now how to edit the frontpage, remove the example blog posts or create your own. Letâ€™s dive in to that.</summary></entry><entry><title type="html">Tutorial II: Fork it!!</title><link href="http://localhost:4000/2020/03/22/fork-it.html" rel="alternate" type="text/html" title="Tutorial II: Fork it!!" /><published>2020-03-22T00:00:00+01:00</published><updated>2020-03-22T00:00:00+01:00</updated><id>http://localhost:4000/2020/03/22/fork-it</id><content type="html" xml:base="http://localhost:4000/2020/03/22/fork-it.html">&lt;p&gt;How to use this template? Well the easiest way may be forking this repository into your own account. You can have your website &lt;strong&gt;without setting up a local environment&lt;/strong&gt; (but you can do it if you are a bit tech savvy). After forking the project, the first thing I would do is to change the project name at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt; tab. The name of the project will became part of the website main address. So if for example you name your repo as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myblog&lt;/code&gt;, your website will be available at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://yourusername.github.io/myblog&lt;/code&gt;. There is a special case, if you name your repo as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yourusername.github.io&lt;/code&gt; then the website will be published at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://yourusername.github.io&lt;/code&gt; which may be a good idea for a personal website!&lt;/p&gt;

&lt;p&gt;Next thing to do is to customize the main settings on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file: website title, description, base URL (remove this setting it if you are deploying to your GitHub user website), and your details. If you donâ€™t want to show excerpts of your posts in the front page you can disable that checking removing that entry on adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; at the beginning of that line. You donâ€™t need to change anything else.&lt;/p&gt;

&lt;p&gt;After the configuration is ready you can enable the website publishing on the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt; page a bit further down. Remember to set up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch as the source of your documents. Once you save your settings wait for a few minutes and your site is ready!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/gh-pages-minima-starter/assets/imgs/gh-pages.png&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Any time you change anything in your repository you do an operation called &lt;em&gt;pushing a commit&lt;/em&gt;. On every push the website is rebuilt. You can see the details of that process in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt; section that is accessible from the repository front-page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/imgs/environments.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Jorge Sanz</name></author><summary type="html">How to use this template? Well the easiest way may be forking this repository into your own account. You can have your website without setting up a local environment (but you can do it if you are a bit tech savvy). After forking the project, the first thing I would do is to change the project name at the Settings tab. The name of the project will became part of the website main address. So if for example you name your repo as myblog, your website will be available at https://yourusername.github.io/myblog. There is a special case, if you name your repo as yourusername.github.io then the website will be published at https://yourusername.github.io which may be a good idea for a personal website!</summary></entry><entry><title type="html">Tutorial I: my first post</title><link href="http://localhost:4000/2020/03/18/my-first-post.html" rel="alternate" type="text/html" title="Tutorial I: my first post" /><published>2020-03-18T00:00:00+01:00</published><updated>2020-03-18T00:00:00+01:00</updated><id>http://localhost:4000/2020/03/18/my-first-post</id><content type="html" xml:base="http://localhost:4000/2020/03/18/my-first-post.html">&lt;p&gt;This is &lt;strong&gt;my very first post&lt;/strong&gt;!! I can write&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unnumbered&lt;/li&gt;
  &lt;li&gt;fancy&lt;/li&gt;
  &lt;li&gt;lists&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But also&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;numbered&lt;/li&gt;
  &lt;li&gt;ones&lt;/li&gt;
  &lt;li&gt;easily&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Images&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/l0MYt5jPR6QX5pnqM/giphy.gif&quot; alt=&quot;a gif!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And so onâ€¦&lt;/p&gt;</content><author><name>Jorge Sanz</name></author><summary type="html">This is my very first post!! I can write</summary></entry></feed>